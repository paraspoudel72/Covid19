{"version":3,"sources":["Components/InfoBox/InfoBox.js","util/util.js","Components/Map/Map.js","Components/Table/Table.js","util/Linegraph.js","Components/App/App.js","index.js"],"names":["InfoBox","active","night","title","cases","total","props","className","Card","onClick","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","borderColor","backgroundColor","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","labels","datasets","App","setCountries","setCasesType","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","nightmode","setNightMode","FormControl","Select","variant","onChange","MenuItem","class","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d31052e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\r\nimport './InfoBox.css';\r\n\r\n\r\nfunction InfoBox({ active, night, title, cases, total, ...props }) {\r\n    return (\r\n        <div className={night ? 'info_night' : 'info'}>\r\n            <Card onClick ={props.onClick} className={`infoBox ${active && 'infoBox-select'} ${title === 'Cases' && 'redc'} ${title === 'Deaths' && 'notredc'}`}>\r\n                <CardContent>\r\n                    <Typography className=\"infoBox_title\" color={!night ? \"textSecondary\" : \"primary\"}>\r\n                        <strong>{title} </strong>\r\n                    </Typography>\r\n                    <h2 className={title+\" infoBox_cases\"}>+{cases}</h2>\r\n                    <Typography className=\"infoBox_total\" color={!night ? \"textSecondary\"  : \"primary\"}>{total} Total</Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 300,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 300,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 500,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType) =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].rgb}\r\n      fillColor={casesTypeColors[casesType].rgb}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React, { useEffect } from \"react\";\r\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from './../../util/util';\r\n\r\nfunction Map({night, countries, casesType,  center , zoom }) {\r\n  return (\r\n    <div className={!night ? \"map\" : 'map_night'}>\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","import React from 'react'\r\nimport './Table.css'\r\n\r\nfunction Table({night, countries}) {\r\n    return (\r\n        <div className={night ? \"table_night\" : \"table\"}>\r\n            {countries.map(({ country, cases })=>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{cases}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    borderColor: \"#CC1034\",\r\n    backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n  },\r\n  recovered: {\r\n    borderColor: \"#7dd71d\",\r\n    backgroundColor: \"rgba(125, 215, 29, 0.5)\",\r\n  },\r\n  deaths: {\r\n    borderColor: \"#fb4443\",\r\n    backgroundColor: \"rgba(251, 68, 67, 0.5)\",\r\n  },\r\n};\r\n\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            labels:['cases', 'recovered', 'deaths'],\r\n            datasets: [\r\n              {\r\n                label: casesType,\r\n                backgroundColor: casesTypeColors[casesType].backgroundColor,\r\n                borderColor: casesTypeColors[casesType].borderColor,\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React, { useState, useEffect } from 'react';\nimport{\n  MenuItem, FormControl, Select, CardContent, Card\n}from '@material-ui/core';\nimport InfoBox from '../InfoBox/InfoBox';\nimport Map from '../Map/Map';\nimport Table from '../Table/Table';\nimport { sortData } from '../../util/util';\nimport LineGraph from '../../util/Linegraph';\nimport 'leaflet/dist/leaflet.css';\nimport './App.css';\n\n\nfunction App() {\n  const [countries, setCountries]= useState([]);\n  const [casesType, setCasesType] = useState('recovered');\n  // https://disease.sh/v3/covid-19/countries\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({lat: 28.3949, lng : 84.1240});\n  const[mapZoom, setMapZoom] = useState(4);\n  const [mapCountries, setMapCountries] = useState([]);\n  useEffect(()=>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response=>response.json())\n    .then(data =>{\n      setCountryInfo(data);\n    })\n  },[]);\n\n  useEffect(()=>{\n    const getCountriesData = async()=>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response)=> response.json())\n      .then((data) =>{\n        const countries = data.map((country)=>({\n            name: country.country,\n            value: country.countryInfo.iso2\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n      });\n    };\n    getCountriesData();\n      \n  },[]);\n\n  const cases_change = ()=>{\n    setCasesType('cases')\n  }\n\n  const recovered_change = ()=>{\n    setCasesType('recovered')\n  }\n\n  const death_change= ()=>{\n    setCasesType('deaths')\n  }\n\n  const onCountryChange = async(event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    const url = countryCode==='worldwide'\n        ? \"https://disease.sh/v3/covid-19/all\" :\n        `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    \n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode)\n      setCountryInfo(data);\n\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    })\n\n    \n  };\n  const [nightmode, setNightMode]= useState(false);\n\n  const onNightChange = ()=>{\n    setNightMode( nightmode ? false : true)\n  }\n  return (\n    <div className={nightmode ? 'App_night' : 'App'}>\n      <div className=\"app_left\">\n\n        <div className='app_header'>\n          <button className={nightmode ? 'night_mode_button_night' : 'night_mode_button'} onClick = {onNightChange}>{nightmode ? 'Day': 'Night'}</button>\n          <h1>Covid 19 Tracker</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country} >\n                <MenuItem className= {nightmode ? 'menu_night' : 'menu'} value=\"worldwide\"><p className= {nightmode ? 'men_night' : 'men'}>Worldwide</p></MenuItem>\n                {\n                  countries.map((country)=>(\n                    <MenuItem class= {nightmode ? 'menu_night' : 'menu'} value = {country.value}>{country.name}</MenuItem>\n                  ))\n                }\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className = \"app_stats\">\n          <div className = 'cases_stats' onClick = {cases_change}>\n          <InfoBox active = {casesType === 'cases'} onClick = {(e)=>setCasesType('cases')} night = {nightmode} title=\"Cases\" cases={countryInfo.todayCases} total={countryInfo.cases}/>\n          </div>\n          <div className = 'recovered_stats' onClick = {recovered_change}>\n          <InfoBox active = {casesType === 'recovered'} onClick = {(e)=>setCasesType('recovered')} night = {nightmode} title=\"Recovered\" cases={countryInfo.todayRecovered} total={countryInfo.recovered}/>\n          </div>\n          <div className = 'death_stats' onClick={death_change}>\n          <InfoBox active = {casesType === 'deaths'} onClick = {(e)=>setCasesType('deaths')} night = {nightmode} title=\"Deaths\" cases={countryInfo.todayDeaths} total={countryInfo.deaths}/>\n          </div>\n          \n          \n          \n        </div>\n        <Map \n        night = {nightmode}\n        countries={mapCountries}\n        casesType = {casesType}\n        center={mapCenter}\n        zoom={mapZoom}/>\n      </div>\n\n      <div className=\"app_right\">\n        <Card>\n          <CardContent>\n              <h3>Live Casess by Country</h3>\n              <Table night = {nightmode} countries={tableData}/>\n              <h3>Worldwide new {casesType}</h3>\n              <LineGraph casesType = {casesType}/>\n            </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}